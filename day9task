*what is space complexity?
-->Space complexity measures the amount of memory an algorithm requires relative to its input size, expressed using Big O notation. 
    It's crucial for analyzing an algorithm's memory usage and optimizing it for efficiency.
*Time and space complexity for list methods?
--> time and space complexities for list methods in Python:
   1. Append:
   - Time Complexity: O(1) average, O(n) worst-case.
   - Space Complexity: O(1)average, O(n) worst-case.
   2. Pop:
   - Time Complexity: O(1)
   - Space Complexity: O(1).
   3. Insert:
   - Time Complexity: O(n)
   - Space Complexity: O(1).
   4. Remove:
   - Time Complexity: O(n)
   - Space Complexity: O(1).
   5. Indexing (Accessing by index):
   - Time Complexity: O(1).
   - Space Complexity: O(1).
*what is the time complexity for set ?
-->Time complexity for sets in Python:
       1. Adding an element: O(1) average case, O(n) worst case 
       2. Removing an element: O(1) average case.
       3. Union, intersection, and difference: O(min(len(s1), len(s2))) where s1 and s2 are the sets being operated on.
       4. Iterating over the set: O(n), where n is the number of elements in the set.
*what is hashing?
-->Hashing is the process of converting data into a fixed-size value using a hash function, commonly used for indexing, data retrieval, and ensuring integrity in computer science and cryptography.
